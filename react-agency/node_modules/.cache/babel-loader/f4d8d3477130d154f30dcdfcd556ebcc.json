{"ast":null,"code":"import { useEffect, useState } from 'react';\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar useScrollPosition = function useScrollPosition() {\n  var _useState = useState(0),\n      _useState2 = slicedToArray(_useState, 2),\n      scrollPosition = _useState2[0],\n      setScrollPosition = _useState2[1];\n\n  useEffect(function () {\n    var last_known_scroll_position = 0;\n    var ticking = false;\n\n    var handleScroll = function handleScroll(e) {\n      last_known_scroll_position = window.scrollY;\n\n      if (!ticking) {\n        window.requestAnimationFrame(function () {\n          setScrollPosition(last_known_scroll_position);\n          ticking = false;\n        });\n        ticking = true;\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return function () {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  });\n  return scrollPosition;\n};\n\nexport default useScrollPosition;","map":null,"metadata":{},"sourceType":"module"}